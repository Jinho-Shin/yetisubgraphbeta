type newTrove @entity {
  id: ID!
  borrower: Bytes!
  arrayIndex: BigInt!
  debt: BigInt!
  amounts: [BigInt!]!
  transaction: Bytes!
  timestamp: BigInt!
  }

enum BorrowerOperation {
    openTrove
    closeTrove
    adjustTrove
  }

type updatedTrove @entity {
  id: ID!
  borrower: Bytes!
  arrayIndex: BigInt!
  debt: BigInt!
  amounts: [BigInt!]!
  transaction: Bytes!
  timestamp: BigInt!
  operation: String!
  currentICR: BigInt!
  managed: Int!
  tokens: [Bytes!]!
  eventAddress: Bytes!
  length: Int!
  collsIn: [Bytes!]!
  amountsIn: [BigInt!]!
  collsOut: [Bytes!]!
  amountsOut: [BigInt!]!
  }

type YUSDPaid @entity {
  id: ID!
  borrower: Bytes!
  fee: BigInt!
  transaction: Bytes!
  timestamp: BigInt!
}

type VariablePaid @entity {
  id: ID!
  borrower: Bytes!
  fee: BigInt!
  transaction: Bytes!
  timestamp: BigInt!
}

type totalStake @entity {
  id: ID!
  token: Bytes!
  newTotalStakes: BigInt!
}

type newLiquidation @entity {
  id: ID!
  liquidatedAmount: BigInt!
  totalYUSDGasCompensation: BigInt!
  totalCollTokens: [Bytes!]!
  totalCollAmounts: [BigInt!]!
  totalCollGasCompTokens: [Bytes!]!
  totalCollGasCompAmounts: [BigInt!]!
  timestamp: BigInt!
}

type newRedemption @entity {
  id: ID!
  borrower: Bytes!
  attemptedYUSDAmount: BigInt!
  actualYUSDAmount: BigInt!
  YUSDPaid: BigInt!
  tokens: [Bytes!]!
  amounts: [BigInt!]!
  timestamp: BigInt!
}

type newDeposit @entity {
  id: ID!
  user: Bytes!
  boostedPartition: BigInt!
  amountOfLP: BigInt!
  rewardRate: BigInt!
  userFactor: BigInt!
  sumOfFactors: BigInt!
  timestamp: BigInt!
}
